naming convention prototype

camel-case is always used. no abbreviations.
all object and functions are to be placed under the harbinger namespace:
namespace harbinger {}
namespace enclosures must always be followed by a comment to indicate the end of the namespace.

1.1
variables need prefixes in the following cases:
	classes:			c_var
	structures:			s_var
	arrays:				a_var
	pointers:			p_var
	dynamic arrays:		d_var
	unions:			u_var
	enumerations:		e_var
	macros:			M_VAR
	global constants:		C_VAR
	static globals:			S_VAR
	function pointers:		f_var
	object members:		m_var

1.2
typedefs will always use suffixes:
	char:				var_c
	int:				var_i
	short:				var_s
	long:				var_l
	unsigned int:			var_ui
	unsigned short:		var_us
	unsigned long:		var_ul
	unsigned char:		var_uc
	float:				var_f

1.3
exceptions to this will be in the case of variables as named in section 1.1. For example,
	typedef int var_i
	typedef c_var1 c_var2;

header file macros:
	#ifndef	__HGE_HEADER_H__
	#define	__HGE_HEADER_H__
	#endif	//__HGE_HEADER_H__

Inlined functions/methods are placed into *.inl files, then placed at the bottom of their corresponding header files using:
	#include "file.inl"

Templated functions/methods are placed into *.tmpl files, then placed at the bottom of their corresponding header files using
	#include "file.tmpl"